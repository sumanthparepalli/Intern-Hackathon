"""empty message

Revision ID: 8f813fae626d
Revises: 
Create Date: 2020-06-27 21:21:44.445671

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8f813fae626d'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('categoryId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('categoryName', sa.String(length=100), nullable=False),
    sa.Column('categoryDescription', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('categoryId')
    )
    op.create_table('product',
    sa.Column('productId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('weight', sa.INTEGER(), nullable=True),
    sa.Column('measurementType', sa.Boolean(), nullable=True),
    sa.Column('Description', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('productId')
    )
    op.create_table('store',
    sa.Column('storeId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('storeName', sa.String(length=100), nullable=False),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('state', sa.String(length=100), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=False),
    sa.Column('street', sa.String(length=100), nullable=False),
    sa.Column('zipCode', sa.String(length=10), nullable=False),
    sa.Column('latitude', sa.DECIMAL(precision=12, scale=9), nullable=False),
    sa.Column('longitude', sa.DECIMAL(precision=12, scale=9), nullable=False),
    sa.PrimaryKeyConstraint('storeId'),
    sa.UniqueConstraint('latitude', 'longitude')
    )
    op.create_table('users',
    sa.Column('userId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=500), nullable=False),
    sa.Column('userType', sa.Boolean(), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=True),
    sa.Column('mobile', sa.String(length=15), nullable=True),
    sa.PrimaryKeyConstraint('userId'),
    sa.UniqueConstraint('username')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_password'), 'users', ['password'], unique=False)
    op.create_table('card_info',
    sa.Column('cardNumber', sa.String(length=12), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('expMonth', sa.Integer(), nullable=False),
    sa.Column('expYear', sa.Integer(), nullable=False),
    sa.Column('nameOnCard', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('cardNumber')
    )
    op.create_table('category_product_map',
    sa.Column('categoryId', sa.Integer(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['categoryId'], ['category.categoryId'], ),
    sa.ForeignKeyConstraint(['productId'], ['product.productId'], ),
    sa.PrimaryKeyConstraint('categoryId', 'productId')
    )
    op.create_table('credit_scheme',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10000, scale=9), nullable=True),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('userId', 'storeId')
    )
    op.create_table('inventory',
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=10000, scale=9), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['productId'], ['product.productId'], ),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.PrimaryKeyConstraint('storeId', 'productId')
    )
    op.create_table('order',
    sa.Column('orderId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('dateOfOrder', sa.Date(), nullable=True),
    sa.Column('totalAmount', sa.DECIMAL(precision=10000, scale=9), nullable=True),
    sa.Column('shippingAddressId', sa.Integer(), nullable=True),
    sa.Column('billingAddressId', sa.Integer(), nullable=True),
    sa.Column('orderCount', sa.Integer(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('orderId')
    )
    op.create_table('payment_processing',
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10000, scale=9), nullable=True),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.PrimaryKeyConstraint('storeId')
    )
    op.create_table('prepaid_scheme',
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('amount', sa.DECIMAL(precision=10000, scale=9), nullable=True),
    sa.Column('discount', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.PrimaryKeyConstraint('storeId')
    )
    op.create_table('user_address',
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('addressId', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('country', sa.String(length=100), nullable=False),
    sa.Column('state', sa.String(length=100), nullable=False),
    sa.Column('city', sa.String(length=100), nullable=False),
    sa.Column('street', sa.String(length=100), nullable=False),
    sa.Column('zipcode', sa.String(length=10), nullable=False),
    sa.Column('latitude', sa.DECIMAL(precision=12, scale=9), nullable=False),
    sa.Column('longitude', sa.DECIMAL(precision=12, scale=9), nullable=False),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('addressId')
    )
    op.create_table('user_store_map',
    sa.Column('userId', sa.Integer(), nullable=False),
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('userId', 'storeId')
    )
    op.create_table('order_details',
    sa.Column('orderId', sa.Integer(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('priceAfterDiscount', sa.DECIMAL(precision=10000, scale=9), nullable=False),
    sa.ForeignKeyConstraint(['orderId'], ['order.orderId'], ),
    sa.ForeignKeyConstraint(['productId'], ['product.productId'], ),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.PrimaryKeyConstraint('orderId', 'productId', 'storeId')
    )
    op.create_table('sub_inventory',
    sa.Column('storeId', sa.Integer(), nullable=False),
    sa.Column('productId', sa.Integer(), nullable=False),
    sa.Column('price', sa.DECIMAL(precision=10000, scale=9), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('discount', sa.Integer(), nullable=False),
    sa.Column('orderId', sa.Integer(), nullable=True),
    sa.Column('delivery', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['orderId'], ['order.orderId'], ),
    sa.ForeignKeyConstraint(['productId'], ['product.productId'], ),
    sa.ForeignKeyConstraint(['storeId'], ['store.storeId'], ),
    sa.PrimaryKeyConstraint('storeId', 'productId')
    )
    op.create_table('transaction_details',
    sa.Column('transactionId', sa.String(length=100), nullable=False),
    sa.Column('orderId', sa.Integer(), nullable=True),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('amount', sa.DECIMAL(precision=10000, scale=9), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['orderId'], ['order.orderId'], ),
    sa.ForeignKeyConstraint(['userId'], ['users.userId'], ),
    sa.PrimaryKeyConstraint('transactionId')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('transaction_details')
    op.drop_table('sub_inventory')
    op.drop_table('order_details')
    op.drop_table('user_store_map')
    op.drop_table('user_address')
    op.drop_table('prepaid_scheme')
    op.drop_table('payment_processing')
    op.drop_table('order')
    op.drop_table('inventory')
    op.drop_table('credit_scheme')
    op.drop_table('category_product_map')
    op.drop_table('card_info')
    op.drop_index(op.f('ix_users_password'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('store')
    op.drop_table('product')
    op.drop_table('category')
    # ### end Alembic commands ###
